import { getBscRheaPriceInUsdt } from './bscCalculateRheaPriceInUsdt';
import { getNearRheaPriceInUsdt } from './nearCalculateRheaPriceInUsdt';

// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∏—Å–µ–ª –¥–ª—è –≤—ã–≤–æ–¥–∞
function formatPrice(price: number): string {
  return price.toLocaleString('en-US', {
    minimumFractionDigits: 6,
    maximumFractionDigits: 6
  });
}

// –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
function calculateDifference(a: number, b: number): {
  difference: number;
  percentage: number;
  isHigher: boolean;
} {
  const diff = Math.abs(a - b);
  const percentage = (diff / Math.min(a, b)) * 100;
  return {
    difference: diff,
    percentage,
    isHigher: a > b
  };
}

async function main() {
  try {
    console.clear(); // –æ—á–∏—â–∞–µ–º –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤—ã–≤–æ–¥–æ–º

    const [bscData, nearData] = await Promise.allSettled([
      getBscRheaPriceInUsdt(),
      getNearRheaPriceInUsdt()
    ]);

    const bscStatus = bscData.status === 'fulfilled' ? '‚úÖ' : '‚ùå';
    const nearStatus = nearData.status === 'fulfilled' ? '‚úÖ' : '‚ùå';

    console.log('‚ïê'.repeat(50));
    console.log('üîÑ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω RHEA/USDT –º–µ–∂–¥—É –±–ª–æ–∫—á–µ–π–Ω–∞–º–∏');
    console.log('‚ïê'.repeat(50));
    console.log(`BSC Status: ${bscStatus}\tNEAR Status: ${nearStatus}`);
    console.log('‚îÄ'.repeat(50));

    if (bscData.status === 'fulfilled') {
      const { price, inversePrice, timestamp } = bscData.value;
      console.log(`üìä Binance Smart Chain (BSC):`);
      console.log(`  1 RHEA = ${formatPrice(price)} USDT`);
      console.log(`  1 USDT = ${formatPrice(inversePrice)} RHEA`);
      console.log(`  Timestamp: ${new Date(timestamp).toLocaleString()}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã BSC:', bscData.reason);
    }

    console.log('‚îÄ'.repeat(50));

    if (nearData.status === 'fulfilled') {
      const { price, inversePrice, timestamp } = nearData.value;
      console.log(`üåê NEAR Protocol:`);
      console.log(`  1 RHEA = ${formatPrice(price)} USDT`);
      console.log(`  1 USDT = ${formatPrice(inversePrice)} RHEA`);
      console.log(`  Timestamp: ${new Date(timestamp).toLocaleString()}`);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã NEAR:', nearData.reason);
    }

    if (bscData.status === 'fulfilled' && nearData.status === 'fulfilled') {
      const bscPrice = bscData.value.price;
      const nearPrice = nearData.value.price;

      const comparison = calculateDifference(bscPrice, nearPrice);

      console.log('‚ïê'.repeat(50));
      console.log('üìà –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ü–µ–Ω:');
      console.log('‚îÄ'.repeat(50));

      if (comparison.difference > 0) {
        const higherChain = comparison.isHigher ? "BSC" : "NEAR";
        const lowerChain = comparison.isHigher ? "NEAR" : "BSC";
        const priceDiff = comparison.difference;

        // ANSI-—Ü–≤–µ—Ç–∞
        const reset = '\x1b[0m';
        const yellow = '\x1b[33m';
        const red = '\x1b[31m';
        const color =
          comparison.percentage >= 0.1 ? red :
          comparison.percentage >= 1 ? yellow :
          reset;
          
        console.log(`${color}–†–∞–∑–Ω–∏—Ü–∞: ${formatPrice(priceDiff)} USDT`);
        console.log(`–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞: ${comparison.percentage.toFixed(2)}%`);
        console.log(`–¶–µ–Ω–∞ –Ω–∞ ${higherChain} –≤—ã—à–µ, —á–µ–º –Ω–∞ ${lowerChain}${reset}`);

        if (comparison.percentage > 2) {
          console.log(`${color}‚ö†Ô∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞!`);
          console.log(`  –ö—É–ø–∏—Ç—å –Ω–∞ ${lowerChain}, –ø—Ä–æ–¥–∞—Ç—å –Ω–∞ ${higherChain}`);
          console.log(`  –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –ø—Ä–∏–±—ã–ª—å: ~${comparison.percentage.toFixed(2)}%${reset}`);
        }
      } else {
        console.log('–¶–µ–Ω—ã –∏–¥–µ–Ω—Ç–∏—á–Ω—ã');
      }
    }

    console.log('‚ïê'.repeat(50));
  } catch (error) {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error instanceof Error ? error.message : error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é main() –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(main, 10000);

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –ø–µ—Ä–≤–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏)
main();
